// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/molotovtv/tc/tc/build.proto

package tc

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RunningInfo struct {
	PercentageComplete    float32  `protobuf:"fixed32,1,opt,name=PercentageComplete,proto3" json:"percentageComplete"`
	ElapsedSeconds        int64    `protobuf:"varint,2,opt,name=ElapsedSeconds,proto3" json:"elapsedSeconds"`
	EstimatedTotalSeconds int64    `protobuf:"varint,3,opt,name=EstimatedTotalSeconds,proto3" json:"estimatedTotalSeconds"`
	CurrentStageText      string   `protobuf:"bytes,4,opt,name=CurrentStageText,proto3" json:"currentStageText"`
	Outdated              bool     `protobuf:"varint,5,opt,name=Outdated,proto3" json:"outdated"`
	ProbablyHanging       bool     `protobuf:"varint,6,opt,name=ProbablyHanging,proto3" json:"probablyHanging"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *RunningInfo) Reset()         { *m = RunningInfo{} }
func (m *RunningInfo) String() string { return proto.CompactTextString(m) }
func (*RunningInfo) ProtoMessage()    {}
func (*RunningInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4bb525bd519b201, []int{0}
}
func (m *RunningInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunningInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunningInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunningInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunningInfo.Merge(m, src)
}
func (m *RunningInfo) XXX_Size() int {
	return m.Size()
}
func (m *RunningInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RunningInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RunningInfo proto.InternalMessageInfo

func (m *RunningInfo) GetPercentageComplete() float32 {
	if m != nil {
		return m.PercentageComplete
	}
	return 0
}

func (m *RunningInfo) GetElapsedSeconds() int64 {
	if m != nil {
		return m.ElapsedSeconds
	}
	return 0
}

func (m *RunningInfo) GetEstimatedTotalSeconds() int64 {
	if m != nil {
		return m.EstimatedTotalSeconds
	}
	return 0
}

func (m *RunningInfo) GetCurrentStageText() string {
	if m != nil {
		return m.CurrentStageText
	}
	return ""
}

func (m *RunningInfo) GetOutdated() bool {
	if m != nil {
		return m.Outdated
	}
	return false
}

func (m *RunningInfo) GetProbablyHanging() bool {
	if m != nil {
		return m.ProbablyHanging
	}
	return false
}

type Build struct {
	ID                   int         `protobuf:"varint,1,opt,name=ID,proto3,casttype=int" json:"id"`
	Status               BuildStatus `protobuf:"bytes,2,opt,name=Status,proto3,casttype=BuildStatus" json:"status"`
	BranchName           string      `protobuf:"bytes,3,opt,name=BranchName,proto3" json:"branchName"`
	State                BuildState  `protobuf:"bytes,4,opt,name=State,proto3,casttype=BuildState" json:"state"`
	PercentageComplete   float32     `protobuf:"fixed32,5,opt,name=PercentageComplete,proto3" json:"percentageComplete"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Build) Reset()         { *m = Build{} }
func (m *Build) String() string { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()    {}
func (*Build) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4bb525bd519b201, []int{1}
}
func (m *Build) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Build) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Build.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Build) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Build.Merge(m, src)
}
func (m *Build) XXX_Size() int {
	return m.Size()
}
func (m *Build) XXX_DiscardUnknown() {
	xxx_messageInfo_Build.DiscardUnknown(m)
}

var xxx_messageInfo_Build proto.InternalMessageInfo

func (m *Build) GetID() int {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Build) GetStatus() BuildStatus {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Build) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

func (m *Build) GetState() BuildState {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Build) GetPercentageComplete() float32 {
	if m != nil {
		return m.PercentageComplete
	}
	return 0
}

type DetailedBuild struct {
	*Build               `protobuf:"bytes,1,opt,name=Build,proto3,embedded=Build" json:""`
	RunningInfo          *RunningInfo `protobuf:"bytes,2,opt,name=RunningInfo,proto3" json:"running-info"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DetailedBuild) Reset()         { *m = DetailedBuild{} }
func (m *DetailedBuild) String() string { return proto.CompactTextString(m) }
func (*DetailedBuild) ProtoMessage()    {}
func (*DetailedBuild) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4bb525bd519b201, []int{2}
}
func (m *DetailedBuild) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetailedBuild) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetailedBuild.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DetailedBuild) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetailedBuild.Merge(m, src)
}
func (m *DetailedBuild) XXX_Size() int {
	return m.Size()
}
func (m *DetailedBuild) XXX_DiscardUnknown() {
	xxx_messageInfo_DetailedBuild.DiscardUnknown(m)
}

var xxx_messageInfo_DetailedBuild proto.InternalMessageInfo

func (m *DetailedBuild) GetRunningInfo() *RunningInfo {
	if m != nil {
		return m.RunningInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*RunningInfo)(nil), "tc.RunningInfo")
	proto.RegisterType((*Build)(nil), "tc.Build")
	proto.RegisterType((*DetailedBuild)(nil), "tc.DetailedBuild")
}

func init() {
	proto.RegisterFile("github.com/molotovtv/tc/tc/build.proto", fileDescriptor_f4bb525bd519b201)
}

var fileDescriptor_f4bb525bd519b201 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x8e, 0xd2, 0x40,
	0x1c, 0xc7, 0x6d, 0x11, 0x02, 0x03, 0x0b, 0x64, 0x74, 0x15, 0x4d, 0x64, 0x08, 0x07, 0x53, 0x0f,
	0x94, 0xb8, 0xde, 0x4c, 0x4c, 0xcc, 0xc0, 0x1a, 0xb9, 0xb8, 0x9b, 0x61, 0x5f, 0x60, 0xda, 0x0e,
	0xdd, 0x26, 0xed, 0x4c, 0x53, 0xa6, 0x1b, 0x3d, 0xe9, 0x0b, 0xf8, 0x5e, 0x1e, 0xf7, 0x09, 0x26,
	0x86, 0xe3, 0x3c, 0x02, 0x27, 0xd3, 0x69, 0x25, 0xc0, 0xe2, 0xc1, 0x84, 0x03, 0xf3, 0xfd, 0xf3,
	0x9b, 0xe6, 0xd3, 0x5f, 0xc1, 0xeb, 0x30, 0x92, 0xb7, 0xb9, 0xe7, 0xfa, 0x22, 0x99, 0x26, 0x22,
	0x16, 0x52, 0xdc, 0xc9, 0xbb, 0xa9, 0xf4, 0x8b, 0x9f, 0x97, 0x47, 0x71, 0xe0, 0xa6, 0x99, 0x90,
	0x02, 0xda, 0xd2, 0x7f, 0x39, 0xd9, 0xcb, 0x86, 0x22, 0x14, 0x53, 0x63, 0x79, 0xf9, 0xca, 0x9c,
	0xcc, 0xc1, 0xfc, 0x2b, 0x2b, 0xe3, 0x9f, 0x35, 0xd0, 0x26, 0x39, 0xe7, 0x11, 0x0f, 0x17, 0x7c,
	0x25, 0xe0, 0x27, 0x00, 0xaf, 0x59, 0xe6, 0x33, 0x2e, 0x69, 0xc8, 0x66, 0x22, 0x49, 0x63, 0x26,
	0xd9, 0xc0, 0x1a, 0x59, 0x8e, 0x8d, 0x9f, 0x69, 0x85, 0x60, 0xfa, 0xc0, 0x25, 0x27, 0x1a, 0xf0,
	0x3d, 0xe8, 0x5e, 0xc6, 0x34, 0x5d, 0xb3, 0x60, 0xc9, 0x7c, 0xc1, 0x83, 0xf5, 0xc0, 0x1e, 0x59,
	0x4e, 0x0d, 0x43, 0xad, 0x50, 0x97, 0x1d, 0x38, 0xe4, 0x28, 0x09, 0xaf, 0xc0, 0xf9, 0xe5, 0x5a,
	0x46, 0x09, 0x95, 0x2c, 0xb8, 0x11, 0x92, 0xc6, 0x7f, 0x47, 0xd4, 0xcc, 0x88, 0x17, 0x5a, 0xa1,
	0x73, 0x76, 0x2a, 0x40, 0x4e, 0xf7, 0xe0, 0x47, 0xd0, 0x9f, 0xe5, 0x59, 0xc6, 0xb8, 0x5c, 0x16,
	0x0f, 0x79, 0xc3, 0xbe, 0xca, 0xc1, 0xe3, 0x91, 0xe5, 0xb4, 0xf0, 0x53, 0xad, 0x50, 0xdf, 0x3f,
	0xf2, 0xc8, 0x83, 0x34, 0x74, 0x40, 0xf3, 0x2a, 0x97, 0x41, 0x31, 0x79, 0x50, 0x1f, 0x59, 0x4e,
	0x13, 0x77, 0xb4, 0x42, 0x4d, 0x51, 0x69, 0x64, 0xe7, 0xc2, 0x0f, 0xa0, 0x77, 0x9d, 0x09, 0x8f,
	0x7a, 0xf1, 0xb7, 0xcf, 0x94, 0x87, 0x11, 0x0f, 0x07, 0x0d, 0x53, 0x78, 0xa2, 0x15, 0xea, 0xa5,
	0x87, 0x16, 0x39, 0xce, 0x8e, 0x7f, 0xd8, 0xa0, 0x8e, 0x8b, 0x57, 0x0a, 0x5f, 0x01, 0x7b, 0x31,
	0x37, 0xe4, 0x6b, 0xf8, 0x4c, 0x2b, 0x64, 0x47, 0xc1, 0x56, 0xa1, 0x5a, 0xc4, 0x25, 0xb1, 0x17,
	0x73, 0xf8, 0x16, 0x34, 0x96, 0x92, 0xca, 0xbc, 0x04, 0xdb, 0x32, 0x54, 0x1a, 0x6b, 0xa3, 0x6c,
	0x15, 0x6a, 0x9b, 0x19, 0x65, 0x80, 0x54, 0x41, 0xe8, 0x02, 0x80, 0x33, 0xca, 0xfd, 0xdb, 0x2f,
	0x34, 0x61, 0x06, 0x66, 0x0b, 0x77, 0xb5, 0x42, 0xc0, 0xdb, 0xa9, 0x64, 0x2f, 0x01, 0x27, 0xa0,
	0x5e, 0x34, 0x59, 0xc5, 0xea, 0xb9, 0x56, 0xa8, 0x5e, 0xdc, 0xc0, 0xb6, 0x0a, 0x81, 0xdd, 0x05,
	0x8c, 0x94, 0xa9, 0x7f, 0xac, 0x4e, 0xfd, 0x7f, 0x57, 0x67, 0xfc, 0x1d, 0x9c, 0xcd, 0x99, 0xa4,
	0x51, 0xcc, 0x82, 0x92, 0xc4, 0x9b, 0x0a, 0x89, 0x81, 0xd1, 0xbe, 0x68, 0xb9, 0xd2, 0x77, 0x8d,
	0x80, 0x9b, 0xf7, 0x0a, 0x59, 0x5a, 0xa1, 0x47, 0xa4, 0x82, 0x36, 0x3b, 0xd8, 0x66, 0x83, 0xa6,
	0x7d, 0xd1, 0x2b, 0x0a, 0x7b, 0x32, 0xee, 0x6b, 0x85, 0x3a, 0x59, 0x29, 0x4c, 0x22, 0xbe, 0x12,
	0x64, 0xbf, 0x85, 0x3b, 0xbf, 0x36, 0x43, 0xeb, 0x7e, 0x33, 0xb4, 0x7e, 0x6f, 0x86, 0x96, 0xd7,
	0x30, 0x1f, 0xca, 0xbb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x28, 0xab, 0x5e, 0x85, 0x03,
	0x00, 0x00,
}

func (m *RunningInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunningInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PercentageComplete != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PercentageComplete))))
		i += 4
	}
	if m.ElapsedSeconds != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBuild(dAtA, i, uint64(m.ElapsedSeconds))
	}
	if m.EstimatedTotalSeconds != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBuild(dAtA, i, uint64(m.EstimatedTotalSeconds))
	}
	if len(m.CurrentStageText) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBuild(dAtA, i, uint64(len(m.CurrentStageText)))
		i += copy(dAtA[i:], m.CurrentStageText)
	}
	if m.Outdated {
		dAtA[i] = 0x28
		i++
		if m.Outdated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ProbablyHanging {
		dAtA[i] = 0x30
		i++
		if m.ProbablyHanging {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Build) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Build) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuild(dAtA, i, uint64(m.ID))
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBuild(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.BranchName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBuild(dAtA, i, uint64(len(m.BranchName)))
		i += copy(dAtA[i:], m.BranchName)
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBuild(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.PercentageComplete != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PercentageComplete))))
		i += 4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DetailedBuild) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetailedBuild) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Build != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBuild(dAtA, i, uint64(m.Build.Size()))
		n1, err1 := m.Build.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.RunningInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBuild(dAtA, i, uint64(m.RunningInfo.Size()))
		n2, err2 := m.RunningInfo.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBuild(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RunningInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PercentageComplete != 0 {
		n += 5
	}
	if m.ElapsedSeconds != 0 {
		n += 1 + sovBuild(uint64(m.ElapsedSeconds))
	}
	if m.EstimatedTotalSeconds != 0 {
		n += 1 + sovBuild(uint64(m.EstimatedTotalSeconds))
	}
	l = len(m.CurrentStageText)
	if l > 0 {
		n += 1 + l + sovBuild(uint64(l))
	}
	if m.Outdated {
		n += 2
	}
	if m.ProbablyHanging {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Build) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBuild(uint64(m.ID))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBuild(uint64(l))
	}
	l = len(m.BranchName)
	if l > 0 {
		n += 1 + l + sovBuild(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovBuild(uint64(l))
	}
	if m.PercentageComplete != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DetailedBuild) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Build != nil {
		l = m.Build.Size()
		n += 1 + l + sovBuild(uint64(l))
	}
	if m.RunningInfo != nil {
		l = m.RunningInfo.Size()
		n += 1 + l + sovBuild(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBuild(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBuild(x uint64) (n int) {
	return sovBuild(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RunningInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunningInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunningInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentageComplete", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PercentageComplete = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElapsedSeconds", wireType)
			}
			m.ElapsedSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElapsedSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedTotalSeconds", wireType)
			}
			m.EstimatedTotalSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstimatedTotalSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentStageText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentStageText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outdated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Outdated = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbablyHanging", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProbablyHanging = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Build) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Build: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Build: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = BuildStatus(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = BuildState(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentageComplete", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PercentageComplete = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetailedBuild) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetailedBuild: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetailedBuild: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Build == nil {
				m.Build = &Build{}
			}
			if err := m.Build.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunningInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RunningInfo == nil {
				m.RunningInfo = &RunningInfo{}
			}
			if err := m.RunningInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuild
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBuild(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBuild
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBuild
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBuild
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBuild
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBuild(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBuild
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBuild = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBuild   = fmt.Errorf("proto: integer overflow")
)
