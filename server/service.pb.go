// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/molotovtv/tc/server/service.proto

package server

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	tc "github.com/molotovtv/tc/tc"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ProjectEnv struct {
	Project              string   `protobuf:"bytes,1,opt,name=Project,proto3" json:"Project,omitempty"`
	Env                  string   `protobuf:"bytes,2,opt,name=Env,proto3" json:"Env,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectEnv) Reset()         { *m = ProjectEnv{} }
func (m *ProjectEnv) String() string { return proto.CompactTextString(m) }
func (*ProjectEnv) ProtoMessage()    {}
func (*ProjectEnv) Descriptor() ([]byte, []int) {
	return fileDescriptor_04000fa60b41d89f, []int{0}
}
func (m *ProjectEnv) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectEnv.Unmarshal(m, b)
}
func (m *ProjectEnv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectEnv.Marshal(b, m, deterministic)
}
func (m *ProjectEnv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectEnv.Merge(m, src)
}
func (m *ProjectEnv) XXX_Size() int {
	return xxx_messageInfo_ProjectEnv.Size(m)
}
func (m *ProjectEnv) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectEnv.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectEnv proto.InternalMessageInfo

func (m *ProjectEnv) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ProjectEnv) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func init() {
	proto.RegisterType((*ProjectEnv)(nil), "server.ProjectEnv")
}

func init() {
	proto.RegisterFile("github.com/molotovtv/tc/server/service.proto", fileDescriptor_04000fa60b41d89f)
}

var fileDescriptor_04000fa60b41d89f = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x49, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xcd, 0xcf, 0xc9, 0x2f, 0xc9, 0x2f, 0x2b, 0x29,
	0xd3, 0x2f, 0x49, 0xd6, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0x02, 0x53, 0x99, 0xc9, 0xa9, 0x7a,
	0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c, 0x10, 0x51, 0x29, 0x35, 0x5c, 0xba, 0x4a, 0x92, 0xf5,
	0x93, 0x4a, 0x33, 0x73, 0x52, 0x20, 0xea, 0x95, 0x2c, 0xb8, 0xb8, 0x02, 0x8a, 0xf2, 0xb3, 0x52,
	0x93, 0x4b, 0x5c, 0xf3, 0xca, 0x84, 0x24, 0xb8, 0xd8, 0xa1, 0x3c, 0x09, 0x46, 0x05, 0x46, 0x0d,
	0xce, 0x20, 0x18, 0x57, 0x48, 0x80, 0x8b, 0xd9, 0x35, 0xaf, 0x4c, 0x82, 0x09, 0x2c, 0x0a, 0x62,
	0x1a, 0x59, 0x72, 0x71, 0x86, 0x38, 0x07, 0x43, 0x2c, 0x17, 0xd2, 0xe1, 0xe2, 0xf4, 0x49, 0x2c,
	0x2e, 0x71, 0x02, 0x99, 0x2c, 0x24, 0xa4, 0x07, 0x71, 0x84, 0x1e, 0xc2, 0x64, 0x29, 0x4e, 0xbd,
	0x92, 0x64, 0x3d, 0xb0, 0xb4, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0x6e, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xe3, 0xe2, 0x51, 0xc6, 0xdb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TCServiceClient is the client API for TCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TCServiceClient interface {
	// Sends a greeting
	LastBuild(ctx context.Context, in *ProjectEnv, opts ...grpc.CallOption) (*tc.Build, error)
}

type tCServiceClient struct {
	cc *grpc.ClientConn
}

func NewTCServiceClient(cc *grpc.ClientConn) TCServiceClient {
	return &tCServiceClient{cc}
}

func (c *tCServiceClient) LastBuild(ctx context.Context, in *ProjectEnv, opts ...grpc.CallOption) (*tc.Build, error) {
	out := new(tc.Build)
	err := c.cc.Invoke(ctx, "/server.TCService/LastBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TCServiceServer is the server API for TCService service.
type TCServiceServer interface {
	// Sends a greeting
	LastBuild(context.Context, *ProjectEnv) (*tc.Build, error)
}

func RegisterTCServiceServer(s *grpc.Server, srv TCServiceServer) {
	s.RegisterService(&_TCService_serviceDesc, srv)
}

func _TCService_LastBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEnv)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TCServiceServer).LastBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TCService/LastBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TCServiceServer).LastBuild(ctx, req.(*ProjectEnv))
	}
	return interceptor(ctx, in, info, handler)
}

var _TCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.TCService",
	HandlerType: (*TCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LastBuild",
			Handler:    _TCService_LastBuild_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/molotovtv/tc/server/service.proto",
}
